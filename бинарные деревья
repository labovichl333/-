class Node
{
    public int iData;
    public String dData;
    public Node leftChild;
    public Node rightChild;
    
}
import java.util.Stack;

public class BinaryTree {

        private Node root;
 public BinaryTree()
 { root = null;
 }
 public Node find(int key)
 {
     Node current = root;
     while(current.iData != key)
            { if(key < current.iData)
                current = current.leftChild;
                else
                current = current.rightChild;
                if(current == null)
                    return null;
            }
            return current;
 }
 public void insert(int id, String dd)
 {
     Node newNode = new Node();
     newNode.iData = id;
     newNode.dData = dd;
     if(root==null)
         root = newNode;
     else
         {
             Node current = root;
             Node parent;
             while(true)
             {
                 parent = current;
                 if(id < current.iData)
                 {
                     current = current.leftChild;
                     if(current == null)
                     {
                         parent.leftChild = newNode;
                         return;
                     }
                 }
                 else {
                     current = current.rightChild;
                     if(current == null)
                     {
                         parent.rightChild = newNode;
                         return;
                     }
                 }
             }
         }
 }

public boolean delete(int key)
{
    Node current = root;
    Node parent = root;
    boolean isLeftChild = true;
    while (current.iData != key)
    {
        parent = current;
        if (key < current.iData)
        {
            isLeftChild = true;
            current = current.leftChild;
        } else
        {
            isLeftChild = false;
            current = current.rightChild;
        }
        if (current == null)
            return false;
    }

    if (current.leftChild == null && current.rightChild == null) {
        if (current == root)
            root = null;
        else if (isLeftChild)
            parent.leftChild = null;
        else
            parent.rightChild = null;
    }
    else if (current.rightChild == null)
        if (current == root)
            root = current.leftChild;
        else if (isLeftChild)
            parent.leftChild = current.leftChild;
        else
            parent.rightChild = current.leftChild;
    else if (current.leftChild == null)
        if (current == root)
            root = current.rightChild;
        else if (isLeftChild)
            parent.leftChild = current.rightChild;
        else
            parent.rightChild = current.rightChild;
    else
    {
        Node successor = getSuccessor(current);
        if (current == root){
            successor.leftChild=root.leftChild;
            root = successor;
        }

        else if (isLeftChild){
           successor.leftChild=parent.leftChild.leftChild;
            parent.leftChild = successor;
        }
        else{
            successor.leftChild=parent.rightChild.leftChild;
            parent.rightChild = successor;
        }
        return true;
    }
    return true;
}

            private Node getSuccessor (Node delNode)
            {
                Node successorParent = delNode;
                Node successor = delNode;
                Node current = delNode.rightChild;
                while (current != null)
                {
                    successorParent = successor;
                    successor = current;
                    current = current.leftChild;
                }
                if (successor != delNode.rightChild)
                {
                    successorParent.leftChild = successor.rightChild;
                    successor.rightChild = delNode.rightChild;
                }
                return successor;
            }
            public void preOrderTraverse ( )
            {
                System.out.print("\nPreorder traversal: ");
                preOrder(root);
                System.out.println();
            }
    public void postOrderTraverse( )
    {
        System.out.print("\nPostorder traversal: ");
        postOrder(root);
        System.out.println();
    }
    public void inOrderTraverse ( )
    {
        System.out.print("\nInorder traversal: ");
        inOrder(root);
        System.out.println();
    }

            private void preOrder (Node localRoot)
            {
                if (localRoot != null) {
                    System.out.print(localRoot.iData + " ");
                    preOrder(localRoot.leftChild);
                    preOrder(localRoot.rightChild);
                }
            }
            private void inOrder (Node localRoot)
            {
                if (localRoot != null) {
                    inOrder(localRoot.leftChild);
                    System.out.print(localRoot.iData + " ");
                    inOrder(localRoot.rightChild);
                }
            }
            private void postOrder (Node localRoot)
            {
                if (localRoot != null) {
                    postOrder(localRoot.leftChild);
                    postOrder(localRoot.rightChild);
                    System.out.print(localRoot.iData + " ");
                }
            }

            public void displayTree ()
            {
                Stack globalStack = new Stack();
                globalStack.push(root);
                int nBlanks = 32;
                boolean isRowEmpty = false;

                while (isRowEmpty == false) {
                    Stack localStack = new Stack();
                    isRowEmpty = true;
                    for (int j = 0; j < nBlanks; j++)
                        System.out.print(' ');
                    while (globalStack.isEmpty() == false) {
                        Node temp = (Node) globalStack.pop();
                        if (temp != null) {
                            System.out.print(temp.iData);
                            localStack.push(temp.leftChild);
                            localStack.push(temp.rightChild);
                            if (temp.leftChild != null ||
                                    temp.rightChild != null)
                                isRowEmpty = false;
                        } else {
                            System.out.print("--");
                            localStack.push(null);
                            localStack.push(null);
                        }
                        for (int j = 0; j < nBlanks * 2 - 2; j++)
                            System.out.print(' ');
                    }
                    System.out.println();
                    nBlanks /= 2;
                    while (localStack.isEmpty() == false)
                        globalStack.push(localStack.pop());
                }
            }
    }
    public class Main {
    public static void main(String[] args){
        BinaryTree theTree = new BinaryTree();
        theTree.insert(52, "а");
        theTree.insert(27, "б");
        theTree.insert(73, "в");
        theTree.insert(12, "г");
        theTree.insert(37, "д");
        theTree.insert(43, "е");
        theTree.insert(38, "ё");
        theTree.insert(33, "ж");
        theTree.insert(86, "з");
        theTree.insert(84, "и");
        theTree.insert(93, "й");
        theTree.insert(94, "к");


        theTree.displayTree();
        System.out.println(theTree.find(94).dData);
        theTree.delete(52);
        theTree.displayTree();
        theTree.inOrderTraverse();
        theTree.postOrderTraverse();
        theTree.preOrderTraverse();

    }
}
